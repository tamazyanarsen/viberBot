"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;


var _axiosError = _interopRequireDefault(require("axios-error"));
var _axios = _interopRequireDefault(require("axios"));
var _debug = _interopRequireDefault(require("debug"));
var _lodash = _interopRequireDefault(require("lodash.omit"));
var _urlJoin = _interopRequireDefault(require("url-join"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _objectWithoutProperties(source, excluded) {if (source == null) return {};var target = _objectWithoutPropertiesLoose(source, excluded);var key, i;if (Object.getOwnPropertySymbols) {var sourceSymbolKeys = Object.getOwnPropertySymbols(source);for (i = 0; i < sourceSymbolKeys.length; i++) {key = sourceSymbolKeys[i];if (excluded.indexOf(key) >= 0) continue;if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;target[key] = source[key];}}return target;}function _objectWithoutPropertiesLoose(source, excluded) {if (source == null) return {};var target = {};var sourceKeys = Object.keys(source);var key, i;for (i = 0; i < sourceKeys.length; i++) {key = sourceKeys[i];if (excluded.indexOf(key) >= 0) continue;target[key] = source[key];}return target;}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(source, true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(source).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}



























const debugRequest = (0, _debug.default)('messaging-api-viber');

function onRequest({ method, url, body }) {
  debugRequest(`${method} ${url}`);
  if (body) {
    debugRequest('Outgoing request body:');
    debugRequest(JSON.stringify(body, null, 2));
  }
}

/**
   * https://developers.viber.com/docs/api/rest-bot-api/#viber-rest-api
   */
class ViberClient {
  static connect(
  accessTokenOrConfig,
  sender)
  {
    return new ViberClient(accessTokenOrConfig, sender);
  }









  constructor(accessTokenOrConfig, sender) {_defineProperty(this, "_token", void 0);_defineProperty(this, "_sender", void 0);_defineProperty(this, "_onRequest", void 0);_defineProperty(this, "_axios", void 0);
    let origin;
    if (accessTokenOrConfig && typeof accessTokenOrConfig === 'object') {
      const config = accessTokenOrConfig;

      this._token = config.accessToken;
      this._sender = config.sender;
      this._onRequest = config.onRequest || onRequest;
      origin = config.origin;
    } else {
      this._token = accessTokenOrConfig;
      this._sender = sender;
      this._onRequest = onRequest;
    }

    this._axios = _axios.default.create({
      baseURL: `${origin || 'https://chatapi.viber.com'}/pa/`,
      headers: {
        'Content-Type': 'application/json',
        'X-Viber-Auth-Token': this._token } });



    this._axios.interceptors.request.use(config => {
      this._onRequest({
        method: config.method,
        url: (0, _urlJoin.default)(config.baseURL, config.url),
        headers: _objectSpread({},
        config.headers.common, {},
        config.headers[config.method], {},
        (0, _lodash.default)(config.headers, [
        'common',
        'get',
        'post',
        'put',
        'patch',
        'delete',
        'head'])),


        body: config.data });

      return config;
    });
  }

  get axios() {
    return this._axios;
  }

  get accessToken() {
    return this._token;
  }

  async _callAPI(...args) {
    try {
      const response = await this._axios.post(...args);

      const { data, config, request } = response;

      if (data.status !== 0) {
        throw new _axiosError.default(`Viber API - ${data.status_message}`, {
          config,
          request,
          response });

      }

      return data;
    } catch (err) {
      throw new _axiosError.default(err.message, err);
    }
  }

  /**
     * Webhooks
     *
     * https://viber.github.io/docs/api/rest-bot-api/#webhooks
     */

  /**
         * Setting a Webhook
         *
         * https://developers.viber.com/docs/api/rest-bot-api/#setting-a-webhook
         */
  setWebhook(url, eventTypes) {
    const body = {
      url };

    if (eventTypes) {
      body.event_types = eventTypes;
    }
    return this._callAPI('/set_webhook', body);
  }

  /**
     * Removing your webhook
     *
     * https://developers.viber.com/docs/api/rest-bot-api/#removing-your-webhook
     */
  removeWebhook() {
    return this.setWebhook('');
  }

  /**
     * Send Message
     *
     * https://developers.viber.com/docs/api/rest-bot-api/#send-message
     */
  sendMessage(receiver, _ref) {let { type } = _ref,options = _objectWithoutProperties(_ref, ["type"]);
    return this._callAPI('/send_message', _objectSpread({
      receiver,
      type,
      sender: this._sender },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#text-message
     */
  sendText(receiver, text, options = {}) {
    return this.sendMessage(receiver, _objectSpread({
      type: 'text',
      text },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#picture-message
     */
  sendPicture(
  receiver,
  { text, media, thumbnail },
  options = {})
  {
    return this.sendMessage(receiver, _objectSpread({
      type: 'picture',
      text,
      media,
      thumbnail },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#video-message
     */
  sendVideo(
  receiver,
  { media, size, thumbnail, duration },
  options = {})
  {
    return this.sendMessage(receiver, _objectSpread({
      type: 'video',
      media,
      size,
      thumbnail,
      duration },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#file-message
     */
  sendFile(
  receiver,
  { media, size, file_name },
  options = {})
  {
    return this.sendMessage(receiver, _objectSpread({
      type: 'file',
      media,
      size,
      file_name },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#contact-message
     */
  sendContact(
  receiver,
  { name, phone_number },
  options = {})
  {
    return this.sendMessage(receiver, _objectSpread({
      type: 'contact',
      contact: { name, phone_number } },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#location-message
     */
  sendLocation(
  receiver,
  { lat, lon },
  options = {})
  {
    return this.sendMessage(receiver, _objectSpread({
      type: 'location',
      location: { lat, lon } },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#url-message
     */
  sendURL(receiver, url, options = {}) {
    return this.sendMessage(receiver, _objectSpread({
      type: 'url',
      media: url },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#sticker-message
     */
  sendSticker(receiver, stickerId, options = {}) {
    return this.sendMessage(receiver, _objectSpread({
      type: 'sticker',
      sticker_id: stickerId },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#carousel-content-message
     */
  sendCarouselContent(
  receiver,
  richMedia,
  options = {})
  {
    return this.sendMessage(receiver, _objectSpread({
      type: 'rich_media',
      min_api_version: 2,
      rich_media: richMedia },
    options));

  }

  /**
     * Broadcast Message
     *
     * https://developers.viber.com/docs/api/rest-bot-api/#broadcast-message
     */
  broadcastMessage(broadcastList, _ref2) {let { type } = _ref2,options = _objectWithoutProperties(_ref2, ["type"]);
    return this._callAPI('/broadcast_message', _objectSpread({
      broadcast_list: broadcastList,
      type,
      sender: this._sender },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#text-message
     */
  broadcastText(
  broadcastList,
  text,
  options = {})
  {
    return this.broadcastMessage(broadcastList, _objectSpread({
      type: 'text',
      text },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#picture-message
     */
  broadcastPicture(
  broadcastList,
  { text, media, thumbnail },
  options = {})
  {
    return this.broadcastMessage(broadcastList, _objectSpread({
      type: 'picture',
      text,
      media,
      thumbnail },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#video-message
     */
  broadcastVideo(
  broadcastList,
  { media, size, thumbnail, duration },
  options = {})
  {
    return this.broadcastMessage(broadcastList, _objectSpread({
      type: 'video',
      media,
      size,
      thumbnail,
      duration },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#file-message
     */
  broadcastFile(
  broadcastList,
  { media, size, file_name },
  options = {})
  {
    return this.broadcastMessage(broadcastList, _objectSpread({
      type: 'file',
      media,
      size,
      file_name },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#contact-message
     */
  broadcastContact(
  broadcastList,
  { name, phone_number },
  options = {})
  {
    return this.broadcastMessage(broadcastList, _objectSpread({
      type: 'contact',
      contact: { name, phone_number } },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#location-message
     */
  broadcastLocation(
  broadcastList,
  { lat, lon },
  options = {})
  {
    return this.broadcastMessage(broadcastList, _objectSpread({
      type: 'location',
      location: { lat, lon } },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#url-message
     */
  broadcastURL(
  broadcastList,
  url,
  options = {})
  {
    return this.broadcastMessage(broadcastList, _objectSpread({
      type: 'url',
      media: url },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#sticker-message
     */
  broadcastSticker(
  broadcastList,
  stickerId,
  options = {})
  {
    return this.broadcastMessage(broadcastList, _objectSpread({
      type: 'sticker',
      sticker_id: stickerId },
    options));

  }

  /**
     * https://developers.viber.com/docs/api/rest-bot-api/#carousel-content-message
     */
  broadcastCarouselContent(
  broadcastList,
  richMedia,
  options = {})
  {
    return this.broadcastMessage(broadcastList, _objectSpread({
      type: 'rich_media',
      min_api_version: 2,
      rich_media: richMedia },
    options));

  }

  /**
     * Get Account Info
     *
     * https://developers.viber.com/docs/api/rest-bot-api/#get-account-info
     */
  getAccountInfo() {
    return this._callAPI('/get_account_info', {});
  }

  /**
     * Get User Details
     *
     * https://developers.viber.com/docs/api/rest-bot-api/#get-user-details
     */
  async getUserDetails(id) {
    const data = await this._callAPI('/get_user_details', { id });
    return data.user;
  }

  /**
     * Get Online
     *
     * https://developers.viber.com/docs/api/rest-bot-api/#get-online
     */
  async getOnlineStatus(ids) {
    const data = await this._callAPI('/get_online', { ids });
    return data.users;
  }}exports.default = ViberClient;